{"version":3,"sources":["../../../src/modules/player/player.controller.spec.ts"],"sourcesContent":["import { test, describe, expect, beforeEach, vi } from 'vitest'\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { firstValueFrom, of } from 'rxjs'\n\nimport { PlayerController } from './player.controller'\nimport { PlayerService } from './player.service'\n\nimport { formattedDevicesMock, formattedPlaybackStateMock } from '@common/mocks'\n\ndescribe('PlayerController', () => {\n  let playerController: PlayerController\n  let playerService: PlayerService\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PlayerController,\n        {\n          provide: PlayerService,\n          useValue: {\n            availableDevices: vi.fn(),\n            currentPlaybackState: vi.fn(),\n            pausePlayer: vi.fn(),\n            resumePlayer: vi.fn(),\n          },\n        },\n      ],\n    }).compile()\n\n    playerController = module.get<PlayerController>(PlayerController)\n    playerService = module.get<PlayerService>(PlayerService)\n  })\n\n  test('should be defined', () => {\n    expect(playerController).toBeDefined()\n  })\n\n  test('should get available devices', async () => {\n    vi.spyOn(playerService, 'availableDevices').mockReturnValue(\n      of(formattedDevicesMock)\n    )\n\n    expect(\n      await firstValueFrom(playerController.availableDevices('awd'))\n    ).toEqual(formattedDevicesMock)\n  })\n\n  test('should get currentPlaybackState', async () => {\n    vi.spyOn(playerService, 'currentPlaybackState').mockReturnValue(\n      of(formattedPlaybackStateMock)\n    )\n\n    expect(\n      await firstValueFrom(playerController.currentPlaybackState('awd'))\n    ).toEqual(formattedPlaybackStateMock)\n  })\n\n  test('should pause player', async () => {\n    vi.spyOn(playerService, 'pausePlayer').mockReturnValue(\n      of({ success: true })\n    )\n\n    expect(await firstValueFrom(playerController.pausePlayer('awd'))).toEqual({\n      success: true,\n    })\n  })\n\n  test('should resume player', async () => {\n    vi.spyOn(playerService, 'resumePlayer').mockReturnValue(\n      of({ success: true })\n    )\n\n    expect(await firstValueFrom(playerController.resumePlayer('awd'))).toEqual({\n      success: true,\n    })\n  })\n})\n"],"names":["describe","playerController","playerService","beforeEach","module","Test","createTestingModule","providers","PlayerController","provide","PlayerService","useValue","availableDevices","vi","fn","currentPlaybackState","pausePlayer","resumePlayer","compile","get","test","expect","toBeDefined","spyOn","mockReturnValue","of","formattedDevicesMock","firstValueFrom","toEqual","formattedPlaybackStateMock","success"],"mappings":";;;;wBAAuD;yBACnB;sBACD;kCAEF;+BACH;uBAEmC;AAEjEA,IAAAA,gBAAQ,EAAC,oBAAoB;IAC3B,IAAIC;IACJ,IAAIC;IAEJC,IAAAA,kBAAU,EAAC;QACT,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YAC3DC,WAAW;gBACTC,kCAAgB;gBAChB;oBACEC,SAASC,4BAAa;oBACtBC,UAAU;wBACRC,kBAAkBC,UAAE,CAACC,EAAE;wBACvBC,sBAAsBF,UAAE,CAACC,EAAE;wBAC3BE,aAAaH,UAAE,CAACC,EAAE;wBAClBG,cAAcJ,UAAE,CAACC,EAAE;oBACrB;gBACF;aACD;QACH,GAAGI,OAAO;QAEVjB,mBAAmBG,OAAOe,GAAG,CAAmBX,kCAAgB;QAChEN,gBAAgBE,OAAOe,GAAG,CAAgBT,4BAAa;IACzD;IAEAU,IAAAA,YAAI,EAAC,qBAAqB;QACxBC,IAAAA,cAAM,EAACpB,kBAAkBqB,WAAW;IACtC;IAEAF,IAAAA,YAAI,EAAC,gCAAgC;QACnCP,UAAE,CAACU,KAAK,CAACrB,eAAe,oBAAoBsB,eAAe,CACzDC,IAAAA,QAAE,EAACC,2BAAoB;QAGzBL,IAAAA,cAAM,EACJ,MAAMM,IAAAA,oBAAc,EAAC1B,iBAAiBW,gBAAgB,CAAC,SACvDgB,OAAO,CAACF,2BAAoB;IAChC;IAEAN,IAAAA,YAAI,EAAC,mCAAmC;QACtCP,UAAE,CAACU,KAAK,CAACrB,eAAe,wBAAwBsB,eAAe,CAC7DC,IAAAA,QAAE,EAACI,iCAA0B;QAG/BR,IAAAA,cAAM,EACJ,MAAMM,IAAAA,oBAAc,EAAC1B,iBAAiBc,oBAAoB,CAAC,SAC3Da,OAAO,CAACC,iCAA0B;IACtC;IAEAT,IAAAA,YAAI,EAAC,uBAAuB;QAC1BP,UAAE,CAACU,KAAK,CAACrB,eAAe,eAAesB,eAAe,CACpDC,IAAAA,QAAE,EAAC;YAAEK,SAAS;QAAK;QAGrBT,IAAAA,cAAM,EAAC,MAAMM,IAAAA,oBAAc,EAAC1B,iBAAiBe,WAAW,CAAC,SAASY,OAAO,CAAC;YACxEE,SAAS;QACX;IACF;IAEAV,IAAAA,YAAI,EAAC,wBAAwB;QAC3BP,UAAE,CAACU,KAAK,CAACrB,eAAe,gBAAgBsB,eAAe,CACrDC,IAAAA,QAAE,EAAC;YAAEK,SAAS;QAAK;QAGrBT,IAAAA,cAAM,EAAC,MAAMM,IAAAA,oBAAc,EAAC1B,iBAAiBgB,YAAY,CAAC,SAASW,OAAO,CAAC;YACzEE,SAAS;QACX;IACF;AACF"}