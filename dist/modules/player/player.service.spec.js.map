{"version":3,"sources":["../../../src/modules/player/player.service.spec.ts"],"sourcesContent":["import { test, describe, expect, beforeEach, vi } from 'vitest'\nimport { HttpService } from '@nestjs/axios'\nimport { TestingModule, Test } from '@nestjs/testing'\nimport { of, firstValueFrom, throwError, catchError } from 'rxjs'\nimport { ForbiddenException } from '@nestjs/common'\n\nimport { PlayerService } from './player.service'\n\nimport {\n  formattedDevicesMock,\n  formattedPlaybackStateMock,\n  spotifyDevicesMock,\n  spotifyPlaybackStateMock,\n} from '~/common/mocks'\nimport { axiosResponseMockFactory } from '~/utils'\n\nconst forbiddenExceptionObserver = throwError(() => ({\n  response: {\n    data: {\n      error: {\n        status: 403,\n      },\n    },\n  },\n}))\n\ndescribe('PlayerService', () => {\n  let playerService: PlayerService\n  let httpService: HttpService\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PlayerService,\n\n        {\n          provide: HttpService,\n          useValue: {\n            get: vi.fn(),\n            put: vi.fn().mockReturnValue(of('')),\n          },\n        },\n      ],\n    }).compile()\n\n    playerService = module.get<PlayerService>(PlayerService)\n    httpService = module.get<HttpService>(HttpService)\n  })\n\n  test('should be defined', () => {\n    expect(playerService).toBeDefined()\n  })\n\n  describe('availableDevices', () => {\n    test('should get available devices', async () => {\n      vi.spyOn(httpService, 'get').mockReturnValue(\n        of(\n          axiosResponseMockFactory({\n            devices: spotifyDevicesMock,\n          })\n        )\n      )\n\n      expect(\n        await firstValueFrom(playerService.availableDevices('awd'))\n      ).toEqual(formattedDevicesMock)\n    })\n\n    test('should throw Forbidden expception because no device is currently playing', async () => {\n      vi.spyOn(httpService, 'get').mockReturnValue(\n        of(\n          axiosResponseMockFactory({\n            devices: [],\n          })\n        )\n      )\n\n      expect(\n        await firstValueFrom(\n          playerService\n            .availableDevices('awd')\n            .pipe(catchError(error => [error]))\n        )\n      ).toBeInstanceOf(ForbiddenException)\n    })\n  })\n\n  describe('currentPlaybackState', () => {\n    test('should get playback state', async () => {\n      vi.spyOn(httpService, 'get').mockReturnValue(\n        of(axiosResponseMockFactory(spotifyPlaybackStateMock))\n      )\n\n      expect(\n        await firstValueFrom(playerService.currentPlaybackState('awd'))\n      ).toEqual(formattedPlaybackStateMock)\n    })\n\n    test('should throw Forbidden expception because No device is currently playing', async () => {\n      vi.spyOn(httpService, 'get').mockReturnValue(\n        of(axiosResponseMockFactory(''))\n      )\n\n      expect(\n        await firstValueFrom(\n          playerService\n            .currentPlaybackState('awd')\n            .pipe(catchError(error => [error]))\n        )\n      ).toBeInstanceOf(ForbiddenException)\n    })\n  })\n\n  describe('pausePlayer', () => {\n    test('should pause player', async () => {\n      expect(await firstValueFrom(playerService.pausePlayer('awd'))).toEqual({\n        success: true,\n      })\n    })\n\n    test('should throw Forbidden expception because no device is currently playing', async () => {\n      vi.spyOn(httpService, 'put').mockReturnValue(forbiddenExceptionObserver)\n\n      expect(\n        await firstValueFrom(\n          playerService.pausePlayer('awd').pipe(catchError(error => [error]))\n        )\n      ).toBeInstanceOf(ForbiddenException)\n    })\n  })\n\n  describe('resumePlayer', () => {\n    test('should resume player', async () => {\n      expect(await firstValueFrom(playerService.resumePlayer('awd'))).toEqual({\n        success: true,\n      })\n    })\n\n    test('should throw Forbidden expception because no device is currently playing', async () => {\n      vi.spyOn(httpService, 'put').mockReturnValue(forbiddenExceptionObserver)\n\n      expect(\n        await firstValueFrom(\n          playerService.resumePlayer('awd').pipe(catchError(error => [error]))\n        )\n      ).toBeInstanceOf(ForbiddenException)\n    })\n  })\n})\n"],"names":["forbiddenExceptionObserver","throwError","response","data","error","status","describe","playerService","httpService","beforeEach","module","Test","createTestingModule","providers","PlayerService","provide","HttpService","useValue","get","vi","fn","put","mockReturnValue","of","compile","test","expect","toBeDefined","spyOn","axiosResponseMockFactory","devices","spotifyDevicesMock","firstValueFrom","availableDevices","toEqual","formattedDevicesMock","pipe","catchError","toBeInstanceOf","ForbiddenException","spotifyPlaybackStateMock","currentPlaybackState","formattedPlaybackStateMock","pausePlayer","success","resumePlayer"],"mappings":"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"}