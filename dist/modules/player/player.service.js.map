{"version":3,"sources":["../../../src/modules/player/player.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios'\nimport { Injectable, ForbiddenException } from '@nestjs/common'\nimport { Observable, map, catchError, tap, timer, exhaustMap } from 'rxjs'\n\nimport { PlayerMessage } from './messages'\n\nimport {\n  FormattedDevice,\n  SpotifyDevice,\n  FormattedPlaybackState,\n  SpotifyPlaybackState,\n} from '@common/types/spotify'\nimport { applyAuthorizationHeader, catchSpotifyError } from '~/utils'\nimport { Success } from '@common/dtos'\nimport { adaptDevices, adaptPlaybackState } from '@common/adapters'\n\n@Injectable()\nexport class PlayerService {\n  constructor(private readonly httpService: HttpService) {}\n\n  availableDevices(accessToken: string): Observable<FormattedDevice[]> {\n    return this.httpService\n      .get<{ devices: SpotifyDevice[] }>(\n        '/me/player/devices',\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.devices),\n        catchError(catchSpotifyError),\n        tap(devices => {\n          if (devices.length <= 0)\n            throw new ForbiddenException(PlayerMessage.NO_AVAIBLE_DEVICES)\n        }),\n        map(adaptDevices)\n      )\n  }\n\n  currentPlaybackState(\n    accessToken: string\n  ): Observable<FormattedPlaybackState> {\n    return this.httpService\n      .get<SpotifyPlaybackState>(\n        '/me/player',\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data),\n        catchError(catchSpotifyError),\n        tap(playbackState => {\n          if (!playbackState.device)\n            throw new ForbiddenException(PlayerMessage.NO_PLAYING_DEVICE)\n        }),\n        map(adaptPlaybackState)\n      )\n  }\n\n  pausePlayer(\n    accessToken: string,\n    afterTime = 0,\n    deviceId?: string\n  ): Observable<Success> {\n    const deviceIdQuery = `?device_id=${deviceId}`\n\n    return timer(afterTime).pipe(\n      exhaustMap(() => {\n        return this.httpService\n          .put(\n            `/me/player/pause${deviceId ? deviceIdQuery : ''}`,\n            {},\n            applyAuthorizationHeader(accessToken)\n          )\n          .pipe(\n            map(() => ({\n              success: true,\n            })),\n            catchError(error => {\n              if (error.response.data.error.status === 403)\n                throw new ForbiddenException(PlayerMessage.NO_PLAYING_DEVICE)\n\n              return catchSpotifyError(error)\n            })\n          )\n      })\n    )\n  }\n\n  resumePlayer(accessToken: string, deviceId?: string): Observable<Success> {\n    const deviceIdQuery = `?device_id=${deviceId}`\n\n    return this.httpService\n      .put(\n        `/me/player/play${deviceId ? deviceIdQuery : ''}`,\n        {},\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(() => ({\n          success: true,\n        })),\n        catchError(error => {\n          if (error.response.data.error.status === 403)\n            throw new ForbiddenException(PlayerMessage.DEVICE_ALREADY_PLAYING)\n\n          return catchSpotifyError(error)\n        })\n      )\n  }\n}\n"],"names":["PlayerService","availableDevices","accessToken","httpService","get","applyAuthorizationHeader","pipe","map","response","data","devices","catchError","catchSpotifyError","tap","length","ForbiddenException","PlayerMessage","NO_AVAIBLE_DEVICES","adaptDevices","currentPlaybackState","playbackState","device","NO_PLAYING_DEVICE","adaptPlaybackState","pausePlayer","afterTime","deviceId","deviceIdQuery","timer","exhaustMap","put","success","error","status","resumePlayer","DEVICE_ALREADY_PLAYING","constructor","Injectable"],"mappings":";;;;+BAiBaA;;;eAAAA;;;uBAjBe;wBACmB;sBACqB;0BAEtC;uBAQ8B;0BAEX;;;;;;;;;;IAGpCA,gBAAN;IAGLC,iBAAiBC,WAAmB,EAAiC;QACnE,OAAO,IAAI,CAACC,WAAW,CACpBC,GAAG,CACF,sBACAC,IAAAA,+BAAwB,EAACH,cAE1BI,IAAI,CACHC,IAAAA,SAAG,EAACC,CAAAA,WAAYA,SAASC,IAAI,CAACC,OAAO,GACrCC,IAAAA,gBAAU,EAACC,wBAAiB,GAC5BC,IAAAA,SAAG,EAACH,CAAAA;YACF,IAAIA,QAAQI,MAAM,IAAI,GACpB,MAAM,IAAIC,0BAAkB,CAACC,uBAAa,CAACC,kBAAkB;QACjE,IACAV,IAAAA,SAAG,EAACW,sBAAY;IAEtB;IAEAC,qBACEjB,WAAmB,EACiB;QACpC,OAAO,IAAI,CAACC,WAAW,CACpBC,GAAG,CACF,cACAC,IAAAA,+BAAwB,EAACH,cAE1BI,IAAI,CACHC,IAAAA,SAAG,EAACC,CAAAA,WAAYA,SAASC,IAAI,GAC7BE,IAAAA,gBAAU,EAACC,wBAAiB,GAC5BC,IAAAA,SAAG,EAACO,CAAAA;YACF,IAAI,CAACA,cAAcC,MAAM,EACvB,MAAM,IAAIN,0BAAkB,CAACC,uBAAa,CAACM,iBAAiB;QAChE,IACAf,IAAAA,SAAG,EAACgB,4BAAkB;IAE5B;IAEAC,YACEtB,WAAmB,EACnBuB,YAAY,CAAC,EACbC,QAAiB,EACI;QACrB,MAAMC,gBAAgB,CAAC,WAAW,EAAED,SAAS,CAAC;QAE9C,OAAOE,IAAAA,WAAK,EAACH,WAAWnB,IAAI,CAC1BuB,IAAAA,gBAAU,EAAC;YACT,OAAO,IAAI,CAAC1B,WAAW,CACpB2B,GAAG,CACF,CAAC,gBAAgB,EAAEJ,WAAWC,gBAAgB,GAAG,CAAC,EAClD,CAAC,GACDtB,IAAAA,+BAAwB,EAACH,cAE1BI,IAAI,CACHC,IAAAA,SAAG,EAAC,IAAO,CAAA;oBACTwB,SAAS;gBACX,CAAA,IACApB,IAAAA,gBAAU,EAACqB,CAAAA;gBACT,IAAIA,MAAMxB,QAAQ,CAACC,IAAI,CAACuB,KAAK,CAACC,MAAM,KAAK,KACvC,MAAM,IAAIlB,0BAAkB,CAACC,uBAAa,CAACM,iBAAiB;gBAE9D,OAAOV,IAAAA,wBAAiB,EAACoB;YAC3B;QAEN;IAEJ;IAEAE,aAAahC,WAAmB,EAAEwB,QAAiB,EAAuB;QACxE,MAAMC,gBAAgB,CAAC,WAAW,EAAED,SAAS,CAAC;QAE9C,OAAO,IAAI,CAACvB,WAAW,CACpB2B,GAAG,CACF,CAAC,eAAe,EAAEJ,WAAWC,gBAAgB,GAAG,CAAC,EACjD,CAAC,GACDtB,IAAAA,+BAAwB,EAACH,cAE1BI,IAAI,CACHC,IAAAA,SAAG,EAAC,IAAO,CAAA;gBACTwB,SAAS;YACX,CAAA,IACApB,IAAAA,gBAAU,EAACqB,CAAAA;YACT,IAAIA,MAAMxB,QAAQ,CAACC,IAAI,CAACuB,KAAK,CAACC,MAAM,KAAK,KACvC,MAAM,IAAIlB,0BAAkB,CAACC,uBAAa,CAACmB,sBAAsB;YAEnE,OAAOvB,IAAAA,wBAAiB,EAACoB;QAC3B;IAEN;IAxFAI,YAA6BjC,YAA0B;2BAA1BA;IAA2B;AAyF1D;AA1FaH;IADZqC,IAAAA,kBAAU;;;eAEiC,kBAAW,4BAAX,kBAAW;;GAD1CrC"}