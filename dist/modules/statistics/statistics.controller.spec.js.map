{"version":3,"sources":["../../../src/modules/statistics/statistics.controller.spec.ts"],"sourcesContent":["import { test, describe, expect, beforeEach, vi } from 'vitest'\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { firstValueFrom, of } from 'rxjs'\n\nimport { StatisticsController } from './statistics.controller'\nimport { StatisticsService } from './statistics.service'\n\nimport {\n  analysisMock,\n  formattedArtistMock,\n  formattedArtistsMock,\n  formattedTrackMock,\n  formattedTracksMock,\n  spotifyResponseWithCursorsMockFactory,\n  spotifyResponseWithOffsetMockFactory,\n  topGenresMock,\n} from '@common/mocks'\n\ndescribe('StatisticsController', () => {\n  let statisticsController: StatisticsController\n  let statisticsService: StatisticsService\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        StatisticsController,\n        {\n          provide: StatisticsService,\n          useValue: {\n            lastTracks: vi.fn(),\n            topTracks: vi.fn(),\n            topGenres: vi.fn(),\n            topArtists: vi.fn(),\n            artist: vi.fn(),\n            analysis: vi.fn(),\n          },\n        },\n      ],\n    }).compile()\n\n    statisticsController =\n      module.get<StatisticsController>(StatisticsController)\n    statisticsService = module.get<StatisticsService>(StatisticsService)\n  })\n\n  test('should be defined', () => {\n    expect(statisticsController).toBeDefined()\n  })\n\n  describe('LastTracks', () => {\n    test('should get last tracks', async () => {\n      vi.spyOn(statisticsService, 'lastTracks').mockReturnValue(\n        of(spotifyResponseWithCursorsMockFactory(formattedTracksMock))\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.lastTracks('awd', {}))\n      ).toEqual(spotifyResponseWithCursorsMockFactory(formattedTracksMock))\n    })\n\n    test('should get last tracks with limit query', async () => {\n      const limit = 20\n\n      const formattedTracksWithLimitMock = Array.from(\n        { length: limit },\n        () => formattedTrackMock\n      )\n\n      vi.spyOn(statisticsService, 'lastTracks').mockReturnValue(\n        of(spotifyResponseWithCursorsMockFactory(formattedTracksWithLimitMock))\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.lastTracks('awd', { limit }))\n      ).toEqual(\n        spotifyResponseWithCursorsMockFactory(formattedTracksWithLimitMock)\n      )\n    })\n  })\n\n  describe('TopTracks', () => {\n    test('should get top tracks', async () => {\n      vi.spyOn(statisticsService, 'topTracks').mockReturnValue(\n        of(spotifyResponseWithOffsetMockFactory(formattedTracksMock))\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.topTracks('awd', {}))\n      ).toEqual(spotifyResponseWithOffsetMockFactory(formattedTracksMock))\n    })\n\n    test('should get top tracks with limit query', async () => {\n      const limit = 20\n\n      const formattedTracksWithLimitMock = Array.from(\n        { length: limit },\n        () => formattedTrackMock\n      )\n\n      vi.spyOn(statisticsService, 'topTracks').mockReturnValue(\n        of(spotifyResponseWithOffsetMockFactory(formattedTracksWithLimitMock))\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.topTracks('awd', { limit }))\n      ).toEqual(\n        spotifyResponseWithOffsetMockFactory(formattedTracksWithLimitMock)\n      )\n    })\n  })\n\n  describe('TopGenres', () => {\n    test('should get top genres', async () => {\n      vi.spyOn(statisticsService, 'topGenres').mockReturnValue(\n        of(topGenresMock)\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.topGenres('awd', {}))\n      ).toEqual(topGenresMock)\n    })\n\n    test('should get top genres with limit argument', async () => {\n      const limit = 20\n\n      const genresWithLimitMock = {\n        genres: Array.from({ length: limit }, () => 'genre'),\n      }\n\n      vi.spyOn(statisticsService, 'topGenres').mockReturnValue(\n        of(genresWithLimitMock)\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.topGenres('awd', { limit }))\n      ).toEqual(genresWithLimitMock)\n    })\n  })\n\n  describe('TopArtists', () => {\n    test('should get top artists', async () => {\n      vi.spyOn(statisticsService, 'topArtists').mockReturnValue(\n        of(spotifyResponseWithOffsetMockFactory(formattedArtistsMock))\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.topArtists('awd', {}))\n      ).toEqual(spotifyResponseWithOffsetMockFactory(formattedArtistsMock))\n    })\n\n    test('should get top artists with limit argument', async () => {\n      const limit = 20\n\n      const formattedArtistsWithLimitMock = Array.from(\n        { length: limit },\n        () => formattedArtistMock\n      )\n\n      vi.spyOn(statisticsService, 'topArtists').mockReturnValue(\n        of(spotifyResponseWithOffsetMockFactory(formattedArtistsWithLimitMock))\n      )\n\n      expect(\n        await firstValueFrom(statisticsController.topArtists('awd', { limit }))\n      ).toEqual(\n        spotifyResponseWithOffsetMockFactory(formattedArtistsWithLimitMock)\n      )\n    })\n  })\n\n  test('should get artist', async () => {\n    vi.spyOn(statisticsService, 'artist').mockReturnValue(\n      of(formattedArtistMock)\n    )\n\n    expect(\n      await firstValueFrom(statisticsController.artist('awd', '123'))\n    ).toEqual(formattedArtistMock)\n  })\n\n  test('should get analysis', async () => {\n    vi.spyOn(statisticsService, 'analysis').mockReturnValue(of(analysisMock))\n\n    expect(await firstValueFrom(statisticsController.analysis('awd'))).toEqual(\n      analysisMock\n    )\n  })\n})\n"],"names":["describe","statisticsController","statisticsService","beforeEach","module","Test","createTestingModule","providers","StatisticsController","provide","StatisticsService","useValue","lastTracks","vi","fn","topTracks","topGenres","topArtists","artist","analysis","compile","get","test","expect","toBeDefined","spyOn","mockReturnValue","of","spotifyResponseWithCursorsMockFactory","formattedTracksMock","firstValueFrom","toEqual","limit","formattedTracksWithLimitMock","Array","from","length","formattedTrackMock","spotifyResponseWithOffsetMockFactory","topGenresMock","genresWithLimitMock","genres","formattedArtistsMock","formattedArtistsWithLimitMock","formattedArtistMock","analysisMock"],"mappings":"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"}