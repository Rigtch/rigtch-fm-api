{"version":3,"sources":["../../../src/modules/statistics/statistics.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios'\nimport { Injectable } from '@nestjs/common'\nimport { Observable, map, catchError, mergeMap } from 'rxjs'\n\nimport { analysisFactory } from './utils'\n\nimport { Genres, Analysis } from '@common/dtos'\nimport {\n  FormattedTrack,\n  SpotifyResponse,\n  SpotifyTrack,\n  SpotifyArtist,\n  FormattedArtist,\n  SpotifyAudioFeatures,\n} from '@common/types/spotify'\nimport { applyAuthorizationHeader, catchSpotifyError } from '~/utils'\nimport {\n  adaptArtist,\n  adaptArtists,\n  adaptAudioFeatures,\n  adaptGenres,\n  adaptTracks,\n} from '@common/adapters'\n\n@Injectable()\nexport class StatisticsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  lastTracks(accessToken: string, limit = 20): Observable<FormattedTrack[]> {\n    return this.httpService\n      .get<SpotifyResponse<{ track: SpotifyTrack; played_at: string }>>(\n        `/me/player/recently-played?limit=${limit}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(items =>\n          items.map(({ track, played_at }) => ({\n            ...track,\n            played_at,\n          }))\n        ),\n        map(adaptTracks),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  topGenres(accessToken: string, limit = 10): Observable<Genres> {\n    return this.httpService\n      .get<SpotifyResponse<SpotifyArtist>>(\n        `/me/top/artists?limit=${50}&time_range=long_term`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(items => adaptGenres(items, limit)),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  topArtists(accessToken: string, limit = 10): Observable<FormattedArtist[]> {\n    return this.httpService\n      .get<SpotifyResponse<SpotifyArtist>>(\n        `/me/top/artists?limit=${limit}&time_range=long_term`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(adaptArtists),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  topTracks(accessToken: string, limit = 10): Observable<FormattedTrack[]> {\n    return this.httpService\n      .get<SpotifyResponse<SpotifyTrack>>(\n        `/me/top/tracks?limit=${limit}&time_range=long_term`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(adaptTracks),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  artist(accessToken: string, id: string) {\n    return this.httpService\n      .get<SpotifyArtist>(\n        `/artists/${id}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data),\n        map(adaptArtist),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  analysis(accessToken: string): Observable<Analysis> {\n    return this.topTracks(accessToken, 50).pipe(\n      mergeMap(tracks => {\n        const tracksIds = tracks.map(({ id }) => id).join(',')\n\n        return this.httpService\n          .get<{ audio_features: SpotifyAudioFeatures[] }>(\n            `/audio-features?ids=${tracksIds}`,\n            applyAuthorizationHeader(accessToken)\n          )\n          .pipe(\n            map(response => response.data.audio_features),\n            map(audioFeatures =>\n              audioFeatures.map(audioFeature =>\n                adaptAudioFeatures(audioFeature)\n              )\n            ),\n            map(analysisFactory),\n            catchError(catchSpotifyError)\n          )\n      })\n    )\n  }\n}\n"],"names":["StatisticsService","lastTracks","accessToken","limit","httpService","get","applyAuthorizationHeader","pipe","map","response","data","items","track","played_at","adaptTracks","catchError","catchSpotifyError","topGenres","adaptGenres","topArtists","adaptArtists","topTracks","artist","id","adaptArtist","analysis","mergeMap","tracks","tracksIds","join","audio_features","audioFeatures","audioFeature","adaptAudioFeatures","analysisFactory","constructor","Injectable"],"mappings":"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"}