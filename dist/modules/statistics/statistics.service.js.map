{"version":3,"sources":["../../../src/modules/statistics/statistics.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios'\nimport { Injectable } from '@nestjs/common'\nimport { Observable, map, catchError, mergeMap } from 'rxjs'\n\nimport { analysisFactory } from './utils'\nimport { TimeRange } from './enums'\n\nimport { Genres, Analysis } from '@common/dtos'\nimport {\n  FormattedTrack,\n  SpotifyResponse,\n  SpotifyTrack,\n  SpotifyArtist,\n  FormattedArtist,\n  SpotifyAudioFeatures,\n} from '@common/types/spotify'\nimport { applyAuthorizationHeader, catchSpotifyError } from '~/utils'\nimport {\n  adaptArtist,\n  adaptArtists,\n  adaptAudioFeatures,\n  adaptGenres,\n  adaptTracks,\n} from '@common/adapters'\n\n@Injectable()\nexport class StatisticsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  lastTracks(accessToken: string, limit = 20): Observable<FormattedTrack[]> {\n    return this.httpService\n      .get<SpotifyResponse<{ track: SpotifyTrack; played_at: string }>>(\n        `/me/player/recently-played?limit=${limit}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(items =>\n          items.map(({ track, played_at }) => ({\n            ...track,\n            played_at,\n          }))\n        ),\n        map(adaptTracks),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  topGenres(\n    accessToken: string,\n    limit = 10,\n    timeRange = TimeRange.LONG_TERM\n  ): Observable<Genres> {\n    return this.httpService\n      .get<SpotifyResponse<SpotifyArtist>>(\n        `/me/top/artists?limit=${50}&time_range=${timeRange}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(items => adaptGenres(items, limit)),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  topArtists(\n    accessToken: string,\n    limit = 10,\n    timeRange = TimeRange.LONG_TERM\n  ): Observable<FormattedArtist[]> {\n    return this.httpService\n      .get<SpotifyResponse<SpotifyArtist>>(\n        `/me/top/artists?limit=${limit}&time_range=${timeRange}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(adaptArtists),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  topTracks(\n    accessToken: string,\n    limit = 10,\n    timeRange = TimeRange.LONG_TERM\n  ): Observable<FormattedTrack[]> {\n    return this.httpService\n      .get<SpotifyResponse<SpotifyTrack>>(\n        `/me/top/tracks?limit=${limit}&time_range=${timeRange}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data.items),\n        map(adaptTracks),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  artist(accessToken: string, id: string) {\n    return this.httpService\n      .get<SpotifyArtist>(\n        `/artists/${id}`,\n        applyAuthorizationHeader(accessToken)\n      )\n      .pipe(\n        map(response => response.data),\n        map(adaptArtist),\n        catchError(catchSpotifyError)\n      )\n  }\n\n  analysis(accessToken: string): Observable<Analysis> {\n    return this.topTracks(accessToken, 50).pipe(\n      mergeMap(tracks => {\n        const tracksIds = tracks.map(({ id }) => id).join(',')\n\n        return this.httpService\n          .get<{ audio_features: SpotifyAudioFeatures[] }>(\n            `/audio-features?ids=${tracksIds}`,\n            applyAuthorizationHeader(accessToken)\n          )\n          .pipe(\n            map(response => response.data.audio_features),\n            map(audioFeatures =>\n              audioFeatures.map(audioFeature =>\n                adaptAudioFeatures(audioFeature)\n              )\n            ),\n            map(analysisFactory),\n            catchError(catchSpotifyError)\n          )\n      })\n    )\n  }\n}\n"],"names":["StatisticsService","lastTracks","accessToken","limit","httpService","get","applyAuthorizationHeader","pipe","map","response","data","items","track","played_at","adaptTracks","catchError","catchSpotifyError","topGenres","timeRange","TimeRange","LONG_TERM","adaptGenres","topArtists","adaptArtists","topTracks","artist","id","adaptArtist","analysis","mergeMap","tracks","tracksIds","join","audio_features","audioFeatures","audioFeature","adaptAudioFeatures","analysisFactory","constructor","Injectable"],"mappings":"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"}