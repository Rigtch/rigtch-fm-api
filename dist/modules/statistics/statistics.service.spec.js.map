{"version":3,"sources":["../../../src/modules/statistics/statistics.service.spec.ts"],"sourcesContent":["import { test, describe, expect, beforeEach, vi } from 'vitest'\nimport { HttpService } from '@nestjs/axios'\nimport { TestingModule, Test } from '@nestjs/testing'\nimport { firstValueFrom, of } from 'rxjs'\n\nimport { StatisticsService } from './statistics.service'\n\nimport {\n  spotifyTrackMock,\n  formattedTracksMock,\n  spotifyArtistsMock,\n  formattedArtistsMock,\n  topGenresMock,\n  spotifyTracksMock,\n  spotifyArtistMock,\n  formattedArtistMock,\n  spotifyAudioFeaturesMock,\n  analysisMock,\n  spotifyResponseMockFactory,\n  spotifyResponseWithOffsetMockFactory,\n  spotifyResponseWithCursorsMockFactory,\n} from '@common/mocks'\nimport { axiosResponseMockFactory } from '~/utils'\n\ndescribe('StatisticsService', () => {\n  let statisticsService: StatisticsService\n  let httpService: HttpService\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        StatisticsService,\n\n        {\n          provide: HttpService,\n          useValue: {\n            get: vi.fn(),\n          },\n        },\n      ],\n    }).compile()\n\n    statisticsService = module.get<StatisticsService>(StatisticsService)\n    httpService = module.get<HttpService>(HttpService)\n  })\n\n  test('should be defined', () => {\n    expect(statisticsService).toBeDefined()\n  })\n\n  test('should get last tracks', async () => {\n    vi.spyOn(httpService, 'get').mockReturnValue(\n      of(\n        axiosResponseMockFactory(\n          spotifyResponseWithCursorsMockFactory(\n            Array.from({ length: 5 }).map(() => ({\n              track: spotifyTrackMock,\n              played_at: '2022-11-26T11:01:10.040Z',\n            }))\n          )\n        )\n      )\n    )\n\n    expect(await firstValueFrom(statisticsService.lastTracks('awd'))).toEqual(\n      spotifyResponseWithCursorsMockFactory(formattedTracksMock)\n    )\n  })\n\n  test('should get top artists', async () => {\n    vi.spyOn(httpService, 'get').mockReturnValue(\n      of(\n        axiosResponseMockFactory(\n          spotifyResponseWithOffsetMockFactory(spotifyArtistsMock)\n        )\n      )\n    )\n\n    expect(await firstValueFrom(statisticsService.topArtists('awd'))).toEqual(\n      spotifyResponseWithOffsetMockFactory(formattedArtistsMock)\n    )\n  })\n\n  test('should get top genres', async () => {\n    vi.spyOn(httpService, 'get').mockReturnValue(\n      of(\n        axiosResponseMockFactory(spotifyResponseMockFactory(spotifyArtistsMock))\n      )\n    )\n\n    expect(await firstValueFrom(statisticsService.topGenres('awd', 3))).toEqual(\n      topGenresMock\n    )\n  })\n\n  test('should get top tracks', async () => {\n    vi.spyOn(httpService, 'get').mockReturnValue(\n      of(\n        axiosResponseMockFactory(\n          spotifyResponseWithOffsetMockFactory(spotifyTracksMock)\n        )\n      )\n    )\n\n    expect(await firstValueFrom(statisticsService.topTracks('awd'))).toEqual(\n      spotifyResponseWithOffsetMockFactory(formattedTracksMock)\n    )\n  })\n\n  test('should get artist with given id', async () => {\n    vi.spyOn(httpService, 'get').mockReturnValue(\n      of(axiosResponseMockFactory(spotifyArtistMock))\n    )\n\n    expect(\n      await firstValueFrom(statisticsService.artist('awd', 'some id'))\n    ).toEqual(formattedArtistMock)\n  })\n\n  test('should generate analysis', async () => {\n    vi.spyOn(statisticsService, 'topTracks').mockReturnValue(\n      of(spotifyResponseWithOffsetMockFactory(formattedTracksMock))\n    )\n\n    vi.spyOn(httpService, 'get').mockReturnValue(\n      of(\n        axiosResponseMockFactory({\n          audio_features: [spotifyAudioFeaturesMock],\n        })\n      )\n    )\n\n    expect(await firstValueFrom(statisticsService.analysis('awd'))).toEqual(\n      analysisMock\n    )\n  })\n})\n"],"names":["describe","statisticsService","httpService","beforeEach","module","Test","createTestingModule","providers","StatisticsService","provide","HttpService","useValue","get","vi","fn","compile","test","expect","toBeDefined","spyOn","mockReturnValue","of","axiosResponseMockFactory","spotifyResponseWithCursorsMockFactory","Array","from","length","map","track","spotifyTrackMock","played_at","firstValueFrom","lastTracks","toEqual","formattedTracksMock","spotifyResponseWithOffsetMockFactory","spotifyArtistsMock","topArtists","formattedArtistsMock","spotifyResponseMockFactory","topGenres","topGenresMock","spotifyTracksMock","topTracks","spotifyArtistMock","artist","formattedArtistMock","audio_features","spotifyAudioFeaturesMock","analysis","analysisMock"],"mappings":"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"}