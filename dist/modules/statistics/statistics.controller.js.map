{"version":3,"sources":["../../../src/modules/statistics/statistics.controller.ts"],"sourcesContent":["import { Controller, Get, Query } from '@nestjs/common'\nimport { ApiOkResponse, ApiQuery, ApiTags } from '@nestjs/swagger'\n\nimport { StatisticsService } from './statistics.service'\nimport { LimitArguments } from './dtos'\n\nimport { Token, ApiAuth } from '@modules/auth'\nimport { AuthenticationType } from '@modules/auth/enums'\nimport { Analysis, Artist, Genres, Track } from '@common/dtos'\n\n@Controller('statistics')\n@ApiTags('statistics')\n@ApiAuth(AuthenticationType.ACCESS_TOKEN)\nexport class StatisticsController {\n  constructor(private readonly statisticsService: StatisticsService) {}\n\n  @Get('/last-tracks')\n  @ApiQuery({ name: 'limit', type: Number, required: false })\n  @ApiOkResponse({\n    description: 'Last tracks has been succesfully found',\n    type: [Track],\n  })\n  lastTracks(@Token() accessToken: string, @Query() { limit }: LimitArguments) {\n    return this.statisticsService.lastTracks(accessToken, limit)\n  }\n\n  @Get('/top-tracks')\n  @ApiQuery({ name: 'limit', type: Number, required: false })\n  @ApiOkResponse({\n    description: 'Top tracks has been succesfully found',\n    type: [Track],\n  })\n  topTracks(@Token() accessToken: string, @Query() { limit }: LimitArguments) {\n    return this.statisticsService.topTracks(accessToken, limit)\n  }\n\n  @Get('/top-genres')\n  @ApiQuery({ name: 'limit', type: Number, required: false })\n  @ApiOkResponse({\n    description: 'Top genres has been succesfully found',\n    type: Genres,\n  })\n  topGenres(@Token() accessToken: string, @Query() { limit }: LimitArguments) {\n    return this.statisticsService.topGenres(accessToken, limit)\n  }\n\n  @Get('/top-artists')\n  @ApiQuery({ name: 'limit', type: Number, required: false })\n  @ApiOkResponse({\n    description: 'Top artists has been succesfully found',\n    type: [Artist],\n  })\n  topArtists(@Token() accessToken: string, @Query() { limit }: LimitArguments) {\n    return this.statisticsService.topArtists(accessToken, limit)\n  }\n\n  @Get('/artist')\n  @ApiQuery({ name: 'id', type: String, required: true })\n  @ApiOkResponse({\n    description: 'Artist has been succesfully found',\n    type: Artist,\n  })\n  artist(@Token() accessToken: string, @Query('id') id: string) {\n    return this.statisticsService.artist(accessToken, id)\n  }\n\n  @Get('/analysis')\n  @ApiOkResponse({\n    description: 'Analysis has been succesfully generated',\n    type: Analysis,\n  })\n  analysis(@Token() accessToken: string) {\n    return this.statisticsService.analysis(accessToken)\n  }\n}\n"],"names":["StatisticsController","lastTracks","accessToken","limit","statisticsService","topTracks","topGenres","topArtists","artist","id","analysis","constructor","Get","ApiQuery","name","type","Number","required","ApiOkResponse","description","Track","Token","Query","Genres","Artist","String","Analysis","Controller","ApiTags","ApiAuth","AuthenticationType","ACCESS_TOKEN"],"mappings":"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"}