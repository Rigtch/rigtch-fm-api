{"version":3,"sources":["../../../src/modules/auth/auth.service.spec.ts"],"sourcesContent":["import { URLSearchParams } from 'node:url'\n\nimport { test, describe, expect, beforeEach, vi } from 'vitest'\nimport { HttpService } from '@nestjs/axios'\nimport { ConfigService } from '@nestjs/config'\nimport { JwtService } from '@nestjs/jwt'\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { Profile } from 'passport-spotify'\nimport { firstValueFrom, of } from 'rxjs'\n\nimport { AuthService } from './auth.service'\n\nimport { spotifyProfileMock, formattedProfileMock } from '@common/mocks'\n\ndescribe('AuthService', () => {\n  let authService: AuthService\n  let jwtService: JwtService\n  let httpService: HttpService\n  let configService: ConfigService\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthService,\n\n        {\n          provide: JwtService,\n          useValue: {\n            sign: vi.fn(),\n          },\n        },\n        {\n          provide: HttpService,\n          useValue: {\n            post: vi.fn(),\n            get: vi.fn(),\n          },\n        },\n        {\n          provide: ConfigService,\n          useValue: {\n            get: vi.fn(),\n          },\n        },\n      ],\n    }).compile()\n\n    authService = module.get<AuthService>(AuthService)\n    jwtService = module.get<JwtService>(JwtService)\n    httpService = module.get<HttpService>(HttpService)\n    configService = module.get<ConfigService>(ConfigService)\n  })\n\n  test('should be defined', () => {\n    expect(authService).toBeDefined()\n  })\n\n  test('should login', () => {\n    const profile: Profile = {\n      provider: 'spotify',\n      id: '123',\n      displayName: 'John Doe',\n      username: 'john.doe',\n      photos: ['example'],\n      profileUrl: 'example.com',\n      country: 'US',\n      followers: 0,\n      product: 'premium',\n      _raw: 'raw',\n      _json: {},\n    }\n\n    jwtService.sign = vi.fn().mockReturnValue('token')\n\n    expect(authService.login(profile)).toEqual('token')\n  })\n\n  describe('token', () => {\n    test('should refresh token', async () => {\n      configService.get = vi.fn().mockReturnValue('value')\n\n      const response = {\n        data: {\n          access_token: 'token',\n          expires_in: 3600,\n        },\n      }\n\n      const expectedResponse = {\n        accessToken: 'token',\n        expiresIn: 3600,\n      }\n\n      httpService.post = vi\n        .fn()\n        .mockImplementation((_url, parameters: URLSearchParams) => {\n          if (parameters.get('grant_type') === 'refresh_token') {\n            return of(response)\n          }\n        })\n\n      expect(\n        await firstValueFrom(authService.token({ refreshToken: 'refresh' }))\n      ).toEqual(expectedResponse)\n    })\n\n    test('should authorize and get tokens', async () => {\n      configService.get = vi.fn().mockReturnValue('value')\n\n      const response = {\n        data: {\n          access_token: 'token',\n          refresh_token: 'refresh',\n          expires_in: 3600,\n        },\n      }\n\n      const expectedResponse = {\n        accessToken: 'token',\n        refreshToken: 'refresh',\n        expiresIn: 3600,\n      }\n\n      httpService.post = vi\n        .fn()\n        .mockImplementation((_url, parameters: URLSearchParams) => {\n          if (parameters.get('grant_type') === 'authorization_code') {\n            return of(response)\n          }\n        })\n\n      expect(await firstValueFrom(authService.token({ code: 'code' }))).toEqual(\n        expectedResponse\n      )\n    })\n  })\n\n  test('should return profile', async () => {\n    const response = {\n      data: spotifyProfileMock,\n    }\n\n    httpService.get = vi.fn().mockReturnValue(of(response))\n\n    expect(await firstValueFrom(authService.profile('token'))).toEqual(\n      formattedProfileMock\n    )\n  })\n})\n"],"names":["describe","authService","jwtService","httpService","configService","beforeEach","module","Test","createTestingModule","providers","AuthService","provide","JwtService","useValue","sign","vi","fn","HttpService","post","get","ConfigService","compile","test","expect","toBeDefined","profile","provider","id","displayName","username","photos","profileUrl","country","followers","product","_raw","_json","mockReturnValue","login","toEqual","response","data","access_token","expires_in","expectedResponse","accessToken","expiresIn","mockImplementation","_url","parameters","of","firstValueFrom","token","refreshToken","refresh_token","code","spotifyProfileMock","formattedProfileMock"],"mappings":"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"}