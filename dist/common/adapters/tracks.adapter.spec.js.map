{"version":3,"sources":["../../../src/common/adapters/tracks.adapter.spec.ts"],"sourcesContent":["import { test, describe, expect } from 'vitest'\n\nimport {\n  spotifyTracksMock,\n  formattedTracksMock,\n  spotifyResponseMockFactory,\n} from '../mocks'\n\nimport { adaptPaginatedTracks, adaptTracks } from './tracks.adapter'\n\ndescribe('adaptTracks', () => {\n  test('should adapt tracks', () => {\n    expect(adaptTracks(spotifyTracksMock)).toEqual(formattedTracksMock)\n  })\n\n  test('should adapt tracks without duration', () => {\n    expect(\n      adaptTracks(spotifyTracksMock.map(({ progress_ms, ...rest }) => rest))\n    ).toEqual(formattedTracksMock.map(({ progress, ...rest }) => rest))\n  })\n\n  test('should adapt tracks without playedAt field', () => {\n    expect(\n      adaptTracks(spotifyTracksMock.map(({ played_at, ...rest }) => rest))\n    ).toEqual(formattedTracksMock.map(({ playedAt, ...rest }) => rest))\n  })\n\n  test('should adapt paginated tracks', () => {\n    expect(\n      adaptPaginatedTracks({\n        ...spotifyResponseMockFactory(spotifyTracksMock),\n        offset: 0,\n      })\n    ).toEqual(spotifyResponseMockFactory(formattedTracksMock))\n  })\n})\n"],"names":["describe","test","expect","adaptTracks","spotifyTracksMock","toEqual","formattedTracksMock","map","progress_ms","rest","progress","played_at","playedAt","adaptPaginatedTracks","spotifyResponseMockFactory","offset"],"mappings":";;;;wBAAuC;uBAMhC;+BAE2C;AAElDA,IAAAA,gBAAQ,EAAC,eAAe;IACtBC,IAAAA,YAAI,EAAC,uBAAuB;QAC1BC,IAAAA,cAAM,EAACC,IAAAA,0BAAW,EAACC,wBAAiB,GAAGC,OAAO,CAACC,0BAAmB;IACpE;IAEAL,IAAAA,YAAI,EAAC,wCAAwC;QAC3CC,IAAAA,cAAM,EACJC,IAAAA,0BAAW,EAACC,wBAAiB,CAACG,GAAG,CAAC,CAAC,EAAEC,WAAW,EAAE,GAAGC,MAAM,GAAKA,QAChEJ,OAAO,CAACC,0BAAmB,CAACC,GAAG,CAAC,CAAC,EAAEG,QAAQ,EAAE,GAAGD,MAAM,GAAKA;IAC/D;IAEAR,IAAAA,YAAI,EAAC,8CAA8C;QACjDC,IAAAA,cAAM,EACJC,IAAAA,0BAAW,EAACC,wBAAiB,CAACG,GAAG,CAAC,CAAC,EAAEI,SAAS,EAAE,GAAGF,MAAM,GAAKA,QAC9DJ,OAAO,CAACC,0BAAmB,CAACC,GAAG,CAAC,CAAC,EAAEK,QAAQ,EAAE,GAAGH,MAAM,GAAKA;IAC/D;IAEAR,IAAAA,YAAI,EAAC,iCAAiC;QACpCC,IAAAA,cAAM,EACJW,IAAAA,mCAAoB,EAAC;YACnB,GAAGC,IAAAA,iCAA0B,EAACV,wBAAiB,CAAC;YAChDW,QAAQ;QACV,IACAV,OAAO,CAACS,IAAAA,iCAA0B,EAACR,0BAAmB;IAC1D;AACF"}